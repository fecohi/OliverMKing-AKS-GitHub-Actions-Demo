name: Deploy application to AKS
#on: [pull_request]
on: 
  workflow_dispatch:
    inputs:
      environment:
        description: Deployment Environment
        default: prod
        required: true

env:
  RESOURCEGROUPNAME: "fecohidemosrg"
  LOCATION: "West Europe"
  LOCATION-RG: "westeurope"
  SUBSCRIPTIONID: "d50dcefe-449d-477e-911f-35f7cc5fa517"
  IMAGENAME: "azure-front"
  REGISTRYSKU: "Standard"
  REGISTRYNAME: "fecohidemoaksacr"
  REGISTRYLOCATION: "West Europe"
  CLUSTERNAME: "fecohidemoaks"
  APPINSIGHTSLOCATION: "West Europe"
  CLUSTERLOCATION: "West Europe"
  AGENTCOUNT: "1"
  AGENTVMSIZE: "Standard_B4ms"
  KUBERNETESVERSION: 1.25.4
  OMSLOCATION: "West Europe"
  OMSWORKSPACENAME: "fecohidemoaks2116"
  HTTPSAPPLICATIONROUTINGENABLED: false
  KUBERNETESAPI: "apps/v1"
  NAMESPACE: "fecohidemoaks52c7"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS Credentials
      id: getContext
      run: |
          az aks get-credentials --resource-group ${{ env.RESOURCEGROUPNAME }} --name ${{ env.CLUSTERNAME }} --file $GITHUB_WORKSPACE/kubeconfig
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRYNAME }}.azurecr.io
        username: ${{ secrets.ACR_USER_NAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push image to ACR
      id: build-image
      run: |
        docker build "$GITHUB_WORKSPACE/azure-vote" -f  "azure-vote/Dockerfile" -t ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }} --label dockerfile-path=azure-vote/Dockerfile
        docker push ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
    
    - uses: azure/k8s-set-context@v1
      id: login
      with:
         kubeconfig: ${{ secrets.aks_deploymentcentertest_kubeConfig }}
    
    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep ${{ env.NAMESPACE}} | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace ${{ env.NAMESPACE}}`
        fi

    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ github.event.inputs.tenant }}
        container-registry-url: ${{ env.REGISTRYNAME }}.azurecr.io
        container-registry-username: ${{ secrets.ACR_USER_NAME }}
        container-registry-password: ${{ secrets.ACR_PASSWORD }}
        secret-name: ${{ env.CLUSTERNAME }}dockerauth
          
    - uses: azure/k8s-deploy@v1
      with:
        namespace: ${{ github.event.inputs.tenant }}
        manifests: |
          manifests/deployment.yml
          manifests/service.yml
        images: |
          ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.CLUSTERNAME }}dockerauth